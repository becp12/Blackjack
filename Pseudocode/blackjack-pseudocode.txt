1. Define required variables used to track the state of the game
	1.1. betTotal = num
	1.2. availableCash = num(will change depending on bet and win or lose)
	1.3. playerHand = array of card objects
      		 1.3.1. playerCardValue = num
        	1.4. dealerHand = array of card objects
        		1.4.1. dealerCardValue = num

2. Define required constants
	2.1. Array of objects of cards
			const cards = [
				{value: 'A', suit: 'spades'},
				{value: 5, suit: 'hearts'},
				{value: 'Q', suit: 'clubs},
				etc...
			]
	2.2. betBtn (+ $5) (- $5) (will not be visible once cards are dealt)
	2.3. confirmBetBtn (will not be visible once confirmed/cards are dealt)
	2.4. hitBtn (will only be visible after bet is confirmed and will disappear once player has a max of 5 cards in their hand without busting) - icebox - 5 card charlie
	2.5. standBtn (will only be visible after bet is confirmed)

3. Store elements on the page that will be accessed in code more than once in variables to make code more concise, readable and performant.
	3.1. availableCash (will change depending on bet and win or lose)
	3.2. betTotal

4. Upon loading the app should:
	4.1. Initialize the state variables
		4.1.1. betTotal = 0;
		4.1.2. availableCash = 200;
		4.1.3. playerHand = [ ];
		4.1.4. playerCardValue = 0; (calculated adding up the face value of cards in player hand array)
		4.1.5. dealerHand = [ ];
		4.1.6. dealerCardValue = 0; (calculated adding up the face value of cards in deler hand array)
	4.2. Render those values to the page
        	4.3. Card need to be dealt - 2 to dealer (one face up, one face down), 2 to player - both face up
           		4.3.1. value of card to be calculated and displayed next to card
	4.4. User to update their bet by pressing + $5 or - $5 - they can only bet in $5 multiples

5. Handle the player confirming their bet
	5.1. hit and stand buttons style are changed to visible
	5.2. bet +$5 and bet -$5 buttons will be changed to invisible

6. Handle the player clicking hit
	6.1. Player gets a new card given to them
        	6.2. playerCardValue gets increased
		6.2.1. If the players gets an A, they will get a second score value, one being Ace representing 1 and the other Ace representing 11 (second counter is set to invisible if it goes above 21)
	6.3. Repeat until the players busts, gets 21 or have 5 cards in their hand (if...if else...if else
		playerCardValue > 21 => bust
		playerCardValue === 21 => win and round ends
		playerCardValue < 21 => keep hitting until reach 5 cards or stand

7. Handle the player clicking stand
	7.1. hit and stand buttons are no longer visible
	7.2. dealer reveals their face down card and their value shown next to the cards
	7.3. dealer continues to have more cards pushed to their array until the value reaches 17, they bust, reach 21 or have 5 cards - A random index will be selected to provide an index of which array object should be pushed into the dealers hand array.

8. Evaluate winner
	8.1. winner is determined by who's value is closer to 21.
		Odds:
		- player higher - player wins (2:1 - Bet $5, get $10 back)
		- player gets 21 - automatic win (3:2 - Bet $5, get $12.50 back)
		- player draws with dealer (1:1 - Bet $5, get $5 back)
		- dealer has higher or gets 21 (you lose your bet)
	8.2. winnings adding to the players total available cash and the game goes back to the point where the bet buttons are available (doesn't reset the deck to being completely full - the deck is 52 card minus the ones that were used in the last round).

9. Handle once their are no cards left (card array has 10 or less cards) - shuffle the array (look for documentation on how to shuffle an array)

10. Handle once the player runs out of money - play again button appears on screen - when button is clicked the game initialise function is run so they game starts back how it did at the insitialised state